import { supabase, masiasDB } from '../config/supabase';

export const verifySupabaseSetup = async () => {
  console.log('üîç Verificando configuraci√≥n de Supabase...');
  
  try {
    // 1. Verificar variables de entorno
    const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
    const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;
    
    console.log('üìã Variables de entorno:');
    console.log('  - URL:', supabaseUrl ? '‚úÖ Configurada' : '‚ùå Faltante');
    console.log('  - Key:', supabaseKey ? '‚úÖ Configurada' : '‚ùå Faltante');
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Variables de entorno no configuradas');
    }
    
    // 2. Verificar conexi√≥n b√°sica
    console.log('üîå Probando conexi√≥n...');
    const { error: testError } = await supabase
      .from('masias')
      .select('count')
      .limit(1);
    
    if (testError) {
      throw new Error(`Error de conexi√≥n: ${testError.message}`);
    }
    
    console.log('‚úÖ Conexi√≥n exitosa');
    
    // 3. Obtener todas las mas√≠as
    console.log('üìä Obteniendo mas√≠as...');
    const allMasias = await masiasDB.getAllMasias();
    console.log(`‚úÖ ${allMasias.length} mas√≠as encontradas en total`);
    
    // 4. Obtener mas√≠as aprobadas
    const approvedMasias = await masiasDB.getApprovedMasias();
    console.log(`‚úÖ ${approvedMasias.length} mas√≠as aprobadas`);
    
    // 5. Mostrar estad√≠sticas
    const stats = {
      total: allMasias.length,
      approved: approvedMasias.length,
      pending: allMasias.filter(m => m.status === 'pending').length,
      rejected: allMasias.filter(m => m.status === 'rejected').length
    };
    
    console.log('üìà Estad√≠sticas:');
    console.log('  - Total:', stats.total);
    console.log('  - Aprobadas:', stats.approved);
    console.log('  - Pendientes:', stats.pending);
    console.log('  - Rechazadas:', stats.rejected);
    
    // 6. Verificar estructura de datos
    if (allMasias.length > 0) {
      const sampleMasia = allMasias[0];
      console.log('üîç Estructura de datos (primer registro):');
      console.log('  - ID:', sampleMasia.id);
      console.log('  - Nombre:', sampleMasia.name);
      console.log('  - Estado:', sampleMasia.status);
      console.log('  - Precio:', sampleMasia.price);
    }
    
    console.log('üéâ Verificaci√≥n completada exitosamente');
    return {
      success: true,
      stats,
      allMasias,
      approvedMasias
    };
    
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
};

// Funci√≥n para verificar en producci√≥n
export const verifyProductionSetup = () => {
  console.log('üåê Verificando configuraci√≥n de producci√≥n...');
  
  const isProduction = window.location.hostname !== 'localhost';
  console.log('  - Entorno:', isProduction ? 'Producci√≥n' : 'Desarrollo');
  console.log('  - URL actual:', window.location.href);
  
  // Verificar que las variables de entorno est√°n disponibles
  const hasEnvVars = !!(process.env.REACT_APP_SUPABASE_URL && process.env.REACT_APP_SUPABASE_ANON_KEY);
  console.log('  - Variables de entorno:', hasEnvVars ? '‚úÖ Disponibles' : '‚ùå No disponibles');
  
  return {
    isProduction,
    hasEnvVars,
    currentUrl: window.location.href
  };
};
